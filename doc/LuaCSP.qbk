[article LuaCSP Reference Manual
    [quickbook 1.5]
    [version 0.1]
    [copyright 2012 2013 Alexey Baskakov]
    [license Distributed under GNU General Public License (GPL), Version 2.0. ]
	[source-mode teletype]
]

[section:introduction 1. Introduction]
The idea to express commands or simulation events as a sequence of operations is very natural for programmers.
However, general procedural programming languages tend to execute the instructions in "as fast as possible" fashion.
When the time comes for time-spreaded real world simulations or interaction with the environment in robotics, such concepts as finite state machines or event-driven programming are applicable.
Those concepts can be implemented very efficiently but the resulting model logic is quite fragmented, as the scheduling and the evaluation of conditions are scattered throughout the event routines. 

The LuaCSP framework designed to support natural control flow via parallel composition of domain-specific time-spreaded operations. It's up to extender to implement such operations and to define
logical time frame semantics in each of them.
[endsect]

[section:basicConcepts 2. Basic Concepts]
[endsect]

[section:theLanguage 3. The Language]
[endsect]

[section:embedding 4. Embedding and Extending The Language]
[endsect]

[section:advanced 5. Advanced Topics]
[section Implementation disclaimer]
The following priorities were taken (in declining order):

# Extend standard Lua distribution in non-intrusive way (just using allowed #defines and API)
# Make LuaCSP to run on every architecture where Lua runs. Minimize the usage of advanced C++ (exceptions, RTTI, templates, STL)
# Keep LuaCSP fast and minimalistic.

Current distribution is based on Lua 5.2. However, it can be easily back-ported to Lua 5.1 since LuaCSP doesn't use any specifics.

It also should work perfectly with commercial Lua implementations including debuggers such as [@http://www.havok.com/products/script Havok script] (former KoreVM).

A [@http://luaplus.org/ LuaPlus] port would give some speed-up. Implementing it isn't a problem as well.

[endsect]

[endsect]

[section:faq 6. Frequently Asked Questions]
[endsect]

[section:roadmap 7. Development Roadmap]
The implementation of user requests is priority number one. Next:

# Write very first working vertical slice (almost done).
# Write the comprehensive manual (in progress).
# Implement basic, low-level samples.
# Make it fully test-driven.
# Implemt extra language features.
# Perform obvious optimizations (no heap allocs, memory pools, variants everywhere etc) 
# Implement comprehensive, high-level sample.
# Cross-platform support (x64, cmake)

[endsect]
