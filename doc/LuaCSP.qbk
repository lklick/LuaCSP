[article LuaCSP Reference Manual
    [quickbook 1.5]
    [version 0.1]
	[id manual]
    [copyright 2012 2013 Alexey Baskakov]
    [license Distributed under GNU General Public License (GPL), Version 2.0. ]
	[source-mode teletype]
]

[template sref[name]'''<xref linkend="'''[name]'''" xrefstyle="select:title" />''']

[section:introduction 1. Introduction]
The world is parallel. If we want to write programs that behave as other objects
behave in the real world, then these programs will have a concurrent structure.
Moreover, the structure must be executable and debuggable. A LuaCSP program
models how we think and interact.

The idea to express commands or simulation events as a sequence of operations is
very natural for programmers. However, general procedural programming languages
tend to execute the instructions in "as fast as possible" fashion. When the time
comes for time-spreaded real world simulations or interaction with the
environment in robotics, such concepts as finite state machines or event-driven
programming are applicable. Those concepts can be implemented very efficiently
but the resulting model logic is quite fragmented, as the scheduling and the
evaluation of conditions are scattered throughout the event routines.

The LuaCSP framework designed to support natural control flow via parallel
composition of domain-specific time-spreaded operations. It's up to extender to
implement such operations and to define logical time frame semantics in each of
them.

LuaCSP is a different language. Although it contains Lua as a subset, it has
unusual properties that make effective LuaCSP programs different in character
from programs written in its relatives. A straightforward translation of a C++
or Lua program into LuaCSP is unlikely to produce a satisfactory result - Lua
programs are written in Lua (or even more, in the subset of Lua heavily
influenced by C/C++ minded style), not LuaCSP. Moreover, thinking
about the problem from a LuaCSP perspective can produce a successful and
very different program. In other words, to write LuaCSP code well, it's
important to understand its properties and idioms. It's also important to know
the established conventions for programming in LuaCSP, such as naming,
formatting, program construction, and so on, so that programs you write will be
easy to understand for other LuaCSP programmers. This document gives tips for
writing clear, idiomatic LuaCSP code.
[endsect] [/introduction]

[section:the_language 2. The Language]

[section:origins Origins. Communicating Sequential Processes (CSP)]
Concurrency and multi-threaded programming have a reputation for difficulty. The
problem is due partly to complex designs such as proto threads and partly to
overemphasis on low-level details such as mutexes, condition variables, and even
memory barriers. 

One of the most successful models for providing high-level linguistic support
for concurrency comes from Tony Hoare's Communicating Sequential Processes (CSP).
CSP is a process algebra which is used to describe parallel programs.
Erlang, Stackless Python, Newsqueak and Google Go are well known languages that stem from CSP.
LuaCSP's concurrency primitives derive from orginal Hoare's Occam Programming Language,
whose main contribution is the powerful notion of channels as first class
objects. 

One way to think about CSP model is to consider a typical single-threaded
program running on a single CPU core. It has no need for synchronization primitives. Now
run another such instance. It needs no synchronization as well. Now let those two
communicate via channel. If the communication is the synchronizer, there's still no need for
other synchronization. 
[endsect] [/origins]

[section:channels Channels]
In LuaCSP, a program is a network of processes, which are connected using channels.

A channel is a point-to-point, uni-directional, synchronous unbuffered
communications link. Processes only need to be aware of the channels connecting
them to other processes, and how to communicate on those channels (generally
using the same protocol as the process on the other end). 

The nature of channels means that the communication is (considered)
instantaneous, and takes place when both the inputting and outputting processes
have reached the communication statement. The first process to arrive at a
channel will wait for the second one. When the second process arrives, it wakes
the other one up, the data is copied and both processes carry on as before.

A process in LuaCSP has a simple model: it is a function executing in parallel
with other processes in the same address space. In fact, it is a lightweight Lua
coroutine, costing little more than the allocation of stack space.

Consider the example for two processes, 'foo' and 'bar', connected by a channel
'ch' where 'foo' outputs something down the channel, and where 'bar' reads
something from the channel:
[import samples/example1.lua]
[example1_foobar]

Unlike Lua, LuaCSP has a notion of a 'main' program, which is a root process.
All the other sub-processes can be spawned from main or it's sub-procedures.
[example1_main]
In order to construct a channel you should call:
[example1_construct_channel]
Channel is a garbage-collectable object so there is no need to destroy it
explicitly. As mentioned above, channel introduces two member functions: IN
and OUT. These two functions are fundamental operations and fall under the
umbrella of communication. Channels are uni-directional, unbuffered and
synchronised "wires". When one process communicates on a channel, it will block
until the other party engages in the communication. At that moment, the data is
transferred and both processes continue.
[endsect] [/channels]

[section:fundamentalOperations Fundamental Operations]
LuaCSP includes Lua as a subset. It means that statements and expressions work the same way.
In addition, LuaCSP uses a notion of 'fundamental operations' - functions with implicit 'yield' inside. 
Fundamental operation is a function that lasts
for a specific amount of time defined directly or indirectly in a function call arguments.
Fundamental operations are atoms (smallest building blocks) for composition in LuaCSP.

The most simple example is SLEEP, a system function which just sleeps for specified amount of seconds:
[example1_sleep]
This manual uses a coding convension with all the fundamental operations named in capital letters.
As you can see now, IN and OUT functions for channels are fundamental operations as well.

It's the main task for extender of LuaCSP: to create domain-specific language via wrapping her
base C/C++ code in a composable set of LuaCSP's fundamental operations (see [sref manual.embedding.writing_fundamental_operations]).
As a result, LuaCSP framework defines three conceptual levels, as shown in the picture below:

[@images/csp_framework_layers.png [$images/csp_framework_layers_small.png]]

[endsect] [/fundamentalOperations]

[section:composition Composition of Processes]
The IN and OUT processes aren't much use on their own, so several ways of
putting processes together are provided.

[section:seq Sequential Composition]
Sequential composition of proccesses is the basic one. LuaCSP leverages Lua's default
semantics to run expressions for that, so all your processes will be
executed from top to bottom as in standard Lua:
[import samples/seq.lua]
[seq_foo]

In the example below, the function will run for 10+20+10*1=40 seconds in total.
[seq_sleeps]

[endsect] [/seq]

[section:par Parallel Composition]
Being a parallel language, LuaCSP has the PAR process constructor. This arranges for the processes inside it to be executed in parallel, for example:
[import samples/par.lua]
[par_foo]
In fact, PAR is a function which consumes any number of closures (function instances). We can't change Lua syntax, so we use anonymous closures
to mark separate blocks of code to compose.

PAR waits for all sub-processes to complete:
[par_bar]
In the example above, the function will run for 3+max(1,2,3)+4=10 seconds in total.

In other words, there is a barrier synchronisation at the end of a PAR, on which all the
sub-processes synchronise. As well as synchronising at the end of a PAR block,
processes may also wish to synchronise with other processes at various points
during their lifetime. This is normally achieved by using channels, which allows
two processes to synchronise and communicate some data between them. In many
programs, the data communicated is not used, instead the channel is used purely
for synchronisation.

Because of the Lua lexical scoping rules, local variables can be freely accessed
by functions defined inside their scope. A local variable used by an inner
function is called an upvalue, or external local variable, inside the inner
function. The Lua implementation (in particular, the garbage collector) makes
sure the variables referred to by the closure survive as long as they are
active. 

Concurrent programming in many environments is made difficult by the subtleties
required to implement correct access to shared objects. LuaCSP encourages a
different approach in which shared values are passed around on channels and
never actively shared by separate Lua threads. If two or more processes have no
access to the object, data inconsistencies cannot occur, by design. To encourage this way of thinking, remember Rob Pyke's slogan:

['Do not communicate by sharing memory; instead, share memory by communicating.]

Although LuaCSP doesn't deny shared variables, a high-level approach, using channels to control access makes it easier to write clear, correct programs.

So, for PAR statements it's recommended to share
channels as the only upvalues and hide all the other objects in a process local
scope:
[par_sharedchannel]
[endsect] [/par]

[section:alt Alt Composition]
There is also an ALTernative (external/internal choice) for constructing
processes. Alting is perhaps one of the most useful features of the LuaCSP
language (and CSP in general). It allows a process to wait for multiple events,
but only engage in one of them. In fact, LuaCSP's ALT represents Occam's PRI
ALT (prioritized ALT), which waits for multiple events then selects the first
available, giving highest priority to the one at the top of the list. The
generic syntax for an ALT is trivial:
[import samples/alt.lua]
[alt_syntax]
In other words, ALT function consumes any number of pairs (guard, function closure).
The types of guard (event selector) supported are: 

* Channel inputs. 
* Timeout guards. These simply wait for an absolute time to expire then become ready.
* nil (do-nothing) guard.

Here are some examples:
[alt_channel_guards]
In case of channel input guard, the provided corresponding closure receives all the input channel data as arguments.

[*time] is a LuaCSP system function which returns ['absolute] time in seconds (Lua number):
[alt_time]
Working with absolute time instead of relative time intervals is more suitable for simulation languages.
Typically, a mark on timeline is calculated as a result of some predictions. It's more common to give a name
to some 'notch' in time rather then to an interval.

The last example here is that of 'polling':
[alt_nil]
This code will either find the 'ch1' channel ready, than perform the output on
'ch2', or, it will find the 'ch1' channel not ready and output zero on the 'ch2'
channel. In general, polling is a bad thing. This is because most of the time
it's not required, the desired result is usually achievable through the use of
parallelism (PAR), plus some suitable ALT. Sometimes however it is desirable,
for instance on a loop body whose termination is signalled on an incoming
channel.
[endsect] [/alt]

Of course, any process constructors can be nested, i.e. PAR or ALT can contain
any number of other PARs and ALTs as sub processes (directly or indirectly via
functions).

[endsect] [/composition]

[section:api_examples Domain-Specific API Examples]
The most simple demonstration for LuaCSP domain specific API is sound playback.
In the following example, the PLAY function lasts as long, as sound lasts.
This decouples a composition structure from actual duration of participating sound files and
allows those files to be edited by non-programmers (sound engineers) without corrupting the logic for the dialog:
[import samples/sound.lua]
[sound_dialog]
Another simple example is mixing audio tracks for your multimedia introduction:
[sound_intro]

LuaCSP language can be used not only at high level, but at the level just above your FSMs.
The following animation examples demonstrate that.

Your domain-specific API can include specific channels on object to listen the events. Assume that actor is an FSM which manages
animations on some 3D mesh:
[import samples/animation.lua]
[animation_heartbeat]

The more advanced technique is to use composition of objects and composition of time-spreaded operations on those objects
as two orthogonal concepts helping each other. In cinematic cameras API for your virtual world you can create a hierarchy
of camera controllers and blenders. Then, you can operate controller's parameters in time (mixing, blending, fade in, fade out).
Camera track is external animation for all the camera parameters, created by non-programmer:
[import samples/camera.lua]
[camera_main]
Blender is a controller itself. So you can stick blenders and controllers into each other, creating a hierarchy.
CameraHermiteBlend, CameraBaryCentricBlend, CameraCatmullRomBlend are possible options.

In the example above, camera_play_track and camera_play_track_lookat could be implemented as follows:
[camera_play_track]
The idea is that you can play multiple tracks on controller but apply or mix only certain parameters from those tracks
(position, rotation, depth of field - DOF, field of view - FOV, etc)
Each controller has an array of 3d matrices inside to support a hierarchy of relative geometric transformations.
Coordinates-related operations (TRANSLATION, ROTATION) consume one extra parameter - a number, the index in that array. 
So you can organize your modifiers to work in world space, actor space, actor's bone space and so on.

[camera_play_track_lookat]
Here, in addition to camera position taken from track, ROTATION_TO_ACTOR and DOF_TO_ACTOR operations make camera controller oriented at specified actor.
Orientation and DOF from track are ignored. Controller's DOF is set to focus at specified actor's bone.

[endsect] [/api_examples]

[section:contracts Contracts]
Channels provide a mechanism for implementing the contract between two
different pieces of code and also a way to synchronize them. You can think about contract as a communication interface. 
It's often useful to define a set of named channels and then pass it around as a single argument.
So, the contract is just a structure definition for a table of channels:
[import samples/contract.lua]
[contract_stages]
Contracts improve code re-use (you can produce as many instances of your interface as
you need) and allow you to increase extensibility (you don't need to
modify all the function definitions in order to add one more argument).
Typical example for contracts is user input:
[contract_input]

[endsect] [/contracts]

[section:termination Termination]
[endsect] [/termination]

[endsect] [/the_language]

[section:advanced 3. Advanced Topics]

[section:evaluation Evaluation Precedence]
TBD
[endsect] [/evaluation]

[endsect] [/advanced]

[section:embedding 4. Embedding and Extending The Language]

[section:writing_fundamental_operations Writing Your Own Fundamental Operations]
TBD
[endsect] [/writing_fundamental_operations]

[section:api The Application Program Interface]
TBD
[endsect] [/api]

[endsect] [/embedding]

[section:additional_notes 5. Additional notes]

[section:disclaimer Implementation disclaimer]
The following priorities were taken (in declining order):

# Extend standard Lua distribution in non-intrusive way (just using allowed #defines and API)
# Make LuaCSP to run on every architecture where Lua runs. Minimize the usage of advanced C++ (exceptions, RTTI, templates, STL)
# Keep LuaCSP fast and minimalistic.

Current distribution is based on Lua 5.2. However, it can be easily back-ported to Lua 5.1 since LuaCSP doesn't use any specifics.

It also should work perfectly with commercial Lua implementations (including debugger support) such as [@http://www.havok.com/products/script Havok script] (former KoreVM).

A [@http://luaplus.org/ LuaPlus] port would give some speed-up. Implementing it isn't a problem as well.
[endsect] [/disclaimer]

[section:areas Application areas]

The LuaCSP framework supposed to be used in:

* Video Games Development
	* High-level game flow: to orchestrate asyncronous loading of packages/assets in pseudo-syncronous way.
	* Gameplay-coupled interactive cut scenes with heavy logic flow.
	* Scripted artificial intelligence (at tactic level: units, at strategic level: groups of units)
	* As a general alternative to finite state machines.
* Distributed Systems
	* High-level coordination of network-distributed services and entities.
	* Implementation of a communications protocol for services (requests/responses, handshakes)
	* Deployment scenarios.
* Quality Assuarance and Test Automation
	* Automated user input testing (mimicking human user activities according to use case scenarios)
	* Load testing for High load systems (thousands of client/front-end scripted bots, mimicking users of the service)
* Robotics
	* Concurrent high-level commands to hardware, concurrent sensors monitoring, decisions coordination.
	* Behavior for groups of robots, in-group coordination.
* Graphical User Interfaces/Experience
	* Animation for GUI elements and frames (color, screen movement, fade in/out).
	* Generic dispatch of user input.
	* Input gestures recognition, high-level tracking of real world objects in time (Video cameras, Microsoft's Kinect).
	* Interactive multimedia installations.

[endsect] [/areas]

[endsect] [/additional_notes]

[section:faq 6. Frequently Asked Questions]

* [*Q]: Why Lua?
	* [*A]: Lua is embeddable, high-performance, minimalistic but highly extensible language. [@http://lambda-the-ultimate.org/node/3894 Small is Beautiful: the design of Lua].
	See some admirations for game development here: [@http://gdcvault.com/play/1014795/Havok-Script-Efficient-Lua-Scripting Havok Script: Efficient Lua Scripting].

* [*Q]: How fast is it?
	* [*A]: LuaCSP is intended to be used in real time systems. Most of the time, all the LuaCSP coroutines will be blocked
	waiting for fundamental operations to complete. So it's a matter of balance - you can always move computationally heavy code to C++.

[endsect] [/faq]

[section:roadmap 7. Development Roadmap]
Reacting to user requests is priority number one. Next:

# Write very first working vertical slice (almost done).
# Write the comprehensive manual (in progress).
# Implement basic, low-level samples.
# Make it fully test-driven.
# Implement extra language features (pluto-like serialization, google-go like FIFO for multiple producers/consumers on one channel)
# Perform obvious optimizations (no heap allocs, memory pools, variants everywhere etc) 
# Implement comprehensive, high-level sample.
# Portability, cross-platform support (x64, cmake)

[endsect] [/roadmap]
